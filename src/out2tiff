#! /usr/bin/env bash

# Have debug info in /var/log/cups/error_log:
# set 2>&1 to log all messages
# set 1>&2 to log only errors
set -x

tmpdir="/tmp/jetcom"
input_pdf="input.pdf"
result_tif="result.tiff"
result_pjl="result.pjl"
result_prn="result.prn"

# Clear all tmp files
if [[ -d $tmpdir ]]; then
    rm -Rv $tmpdir
fi

mkdir -pv $tmpdir
cd $tmpdir

# Have the input at fd0 (stdin) in any case:
test -n "$6" && exec <"$6"
echo "INFO: sending PDF to $input_pdf ..." 2>&1

# Forward the data from stdin to the file:
if dd of="$input_pdf";
  then  echo "INFO: sent PDF to $input_pdf successfully" 2>&1
  else  echo "ERROR: send PDF to $input_pdf failed" 2>&1
        exit 1
fi

if [[ -n $1 ]];
  then  echo "INFO: Job ID: $1" 2>&1
        jobid="$1"
  else 	echo "WARN: Job ID not defined" 2>&1
        jobid="not defined"
fi

if [[ -n $2 ]];
  then  echo "INFO: User ID: $2" 2>&1
        userid="$2"
  else 	echo "WARN: User ID not defined" 2>&1
        userid="not defined"
fi

if [[ -n $3 ]];
  then  echo "INFO: Documnet ID: $3" 2>&1
        docid="$3"
  else 	echo "WARN: Document ID not defined" 2>&1
        docid="not defined"
fi

if [[ -n $4 ]];
  then  echo "INFO: Copies number: $4" 2>&1
        copiesNum="$4"
  else 	echo "WARN: Copies number not defined" 2>&1
        copiesNum="not defined"
fi

# Get settings from print dialogue
if [[ -n $5 ]]; then

    if [[ $5 == *"Collate"* ]]; then 
        vCollate="Y"
        echo "Collate option from JOB: true" 2>&1
    fi

    if [[ $5 == *"Trim="* ]]; then 
        vTRIM="${5#*Trim=}"
        vTRIM="${vTRIM:0:1}"
        echo "Trim value from JOB: $vTRIM" 2>&1
    fi

    if [[ $5 == *"PRes=r"* ]]; then 
        vPRES="${5#*PRes=r}"
        vPRES="${vPRES:0:3}"
        echo "Resolution from JOB: $vPRES" 2>&1
    fi

    if [[ $5 == *"MType="* ]]; then 
        vMTYPE="${5#*MType=}"
        vMTYPE="${vMTYPE:0:2}"
        echo "Media Type from JOB: $vMTYPE" 2>&1
    fi

    if [[ $5 == *"OSlot="* ]]; then 
        vOSLOT="${5#*OSlot=}"
        vOSLOT="${vOSLOT:0:2}"
        echo "Output Slot from JOB: $vOSLOT" 2>&1
    fi

    if [[ $5 == *"ISlot="* ]]; then 
        vISLOT="${5#*ISlot=}"
        vISLOT="${vISLOT:0:2}"
        echo "Input Slot from JOB: $vISLOT" 2>&1
    fi

fi

# Get settings from driver default settigns,
# if settings not defined in print dialogue
if [[ $(printenv | grep 'PPD=' | cut -c 5-) ]];
    then    ppdfile="$(printenv | grep 'PPD=' | cut -c 5-)"
            echo "INFO: Read settings from file: $ppdfile" 2>&1
            if ! [[ $vTRIM ]]; then 
                vTRIM=$(cat $ppdfile | grep '*DefaultTrim: ' | cut -c 15-) 
            fi
            
            if ! [[ $vPRES ]]; then 
                vPRES=$(cat $ppdfile | grep '*DefaultPRes: ' | cut -c 16-) 
            fi
            
            if ! [[ $vMTYPE ]]; then 
                vMTYPE=$(cat $ppdfile | grep '*DefaultMType: ' | cut -c 16-) 
            fi
            
            if ! [[ $vOSLOT ]]; then 
                vOSLOT=$(cat $ppdfile | grep '*DefaultOSlot: ' | cut -c 16-) 
            fi
            
            if ! [[ $vISLOT ]]; then 
                vISLOT=$(cat $ppdfile | grep '*DefaultISlot: ' | cut -c 16-) 
            fi
    else    echo "WARN: PPD file not defined" 2>&1
fi

if [[ $vTRIM == "Y" ]];
then
    # Extract all pages into singlepage TIFF files
    if gs   -q \
            -dQUIET \
            -dNOPAUSE \
            -dBATCH \
            -dSAFER \
            -dPARANOIDSAFER \
            -dNOMEDIAATTRS \
            -dNOINTERPOLATE \
            -r$vPRES \
            -sDEVICE=tiffg4 \
            -sOutputFile="page%03d.tiff" \
            $input_pdf 2>&1;
            then echo "INFO: extract pages from PDF to TIFF successfully" 2>&1
            else echo "ERROR: extract pages from PDF to TIFF failed" 2>&1 && exit 1
    fi
    
    # Iter pages and trim white borders
    iter=0
    if [[ $(ls $tmpdir | grep 'page' | grep '.tiff') ]]; 
        then    pages=$(ls $tmpdir | grep 'page' | grep '.tiff')
                for item in $pages
                do
                    iter=$((iter+1))
                    pbtrim="$(printf "page%03d" $iter).tiff"
                    patrim="$(printf "page%03d" $iter)_trimed.tiff"
                    if convert $pbtrim -trim -background white +repage $patrim 2>&1;
                        then echo "INFO: trim $pbtrim successfully" 2>&1
                        else echo "ERROR: trim $pbtrim failed" 2>&1 && exit 1
                    fi
                done
                echo "INFO: trim pages successfully" 2>&1
        else    echo "ERROR: no pages to trim" 2>&1 && exit 1
    fi
    
    # Merge single pages into multipage TIFF
    if convert $(ls $tmpdir | grep '_trimed.tiff'| tr "\n" " ") $result_tif 2>&1;
        then    "INFO: merge pages successfully" 2>&1
        else    "ERROR: merge pages failed" 2>&1 && exit 1
    fi

else

    # Simply convert PDF to TIFF as is
    if gs   -q \
            -dQUIET \
            -dNOPAUSE \
            -dBATCH \
            -dSAFER \
            -dPARANOIDSAFER \
            -dNOMEDIAATTRS \
            -dNOINTERPOLATE \
            -r$vPRES \
            -sDEVICE=tiffg4 \
            -sOutputFile=$result_tif \
            $input_pdf 2>&1;
            then echo "INFO: convert PDF to TIFF successfully" 2>&1
            else echo "ERROR: convert PDF to TIFF failed" 2>&1 && exit 1
    fi
fi

# Create PJL header for printer JOB
touch "$result_pjl"
echo -e "\e%-12345X@PJL COMMENT SET SERIES = Teriostar-01" >> "$result_pjl"
echo "@PJL SET FILENAME = \"$docid\"" >> "$result_pjl"
timestamp=$(date +%Y%m%d%H%M%S)
echo "@PJL SET TIMESTAMP = \"$timestamp\"" >> "$result_pjl"
echo "@PJL SET USERNAME = \"$userid\"" >> "$result_pjl"
echo "@PJL SET HOSTNAME = \"$(hostname)\"" >> "$result_pjl"
echo "@PJL SET DRIVERINFORMATION = \"JetCom Linux Printer Driver v1.0.0a\"" >> "$result_pjl"
echo "@PJL SET ENCRYPTION = 0" >> "$result_pjl"

echo "@PJL COMMENT DSSC PRINT XYRESOLUTION = ${vPRES}x${vPRES}" >> "$result_pjl"
echo "@PJL SET RESOLUTION = ${vPRES}" >> "$result_pjl"


if [[ $vCollate == "Y" ]];
then 
    # Sets the number of collated copies of the job.
    echo "@PJL SET QTY = ${copiesNum}" >> "$result_pjl"
else
    # Sets the number of uncollated copies of the job.
    echo "@PJL SET COPIES = ${copiesNum}" >> "$result_pjl"
fi

# Support by printer??? 
# MANUALFEED, ROLL1, ROLL2, ROLL3..or TRAY1, TRAY2, TRAY3..
#echo "@PJL SET MEDIASOURCE = $vISLOT" >> "$result_pjl"

# PAPER, SPECIAL, TRANSPARENCY, GLOSSY
#echo "@PJL SET MEDIATYPE = $???" >> "$result_pjl"

#echo "@PJL SET INTRAY1SIZE = $???" >> "$result_pjl" # 
#echo "@PJL SET INTRAY2SIZE = $???" >> "$result_pjl" # 
#echo "@PJL SET INTRAY3SIZE = $???" >> "$result_pjl" # 

#echo "@PJL SET PAPER = $???" >> "$result_pjl" # media=A4.. from CUPS


echo "@PJL ENTER LANGUAGE = RTIFF" >> "$result_pjl"

if cat "$result_pjl" "$result_tif" >> "$result_prn";
  then  echo "INFO: join files $result_pjl and $result_tif successfully" 2>&1
        echo -e "\e%-12345X@PJL" >> "$result_prn"
  else  echo "ERROR: join files $result_pjl and $result_tif failed" 2>&1
        exit 1
fi

if dd if="$result_prn";
  then  echo "INFO: send JOB to StdOut successfully" 2>&1
  else  echo "ERROR: send JOB to StdOut failed" 2>&1
        exit 1
fi

exit 0
