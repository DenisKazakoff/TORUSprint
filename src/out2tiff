#! /bin/bash

# Have debug info in /var/log/cups/error_log:
set -x

tmpdir="/tmp/jetcom/torus"
input_pdf="input.pdf"
result_tif="result.tiff"
result_pjl="result.pjl"
result_prn="result.prn"

# Clear all tmp files
if [[ -d ${tmpdir} ]]; then rm -Rv ${tmpdir} 1>&2; fi
mkdir -pv ${tmpdir} 1>&2 && cd ${tmpdir} 1>&2

: '
# Clear all tmp files
if [[ -f ${input_pdf} ]]; then
    rm -v ${input_pdf} 1>&2
fi

if [[ -f ${result_tif} ]]; then 
    rm -v ${result_tif} 1>&2
fi

if [[ -f ${result_pjl} ]]; then 
    rm -v ${result_pjl} 1>&2
fi

if [[ -f ${result_prn} ]]; then 
    rm -v ${result_prn} 1>&2
fi

if [[ $(ls ${tmpdir} | grep 'page' | grep 'tiff') ]]; then
    tempfiles=$(ls ${tmpdir} | grep 'page' | grep 'tiff')
    for item in ${tempfiles}; do
        if [ -f ${item} ]; then rm -v ${item} 1>&2; fi
    done
fi
 '

 # Have the input at fd0 (stdin) in any case:
test -n "$6" && exec <"$6"
echo "INFO: sending PDF to ${input_pdf} ..." 1>&2
# Forward the data from stdin to the file:
if dd of="${input_pdf}";
  then  echo "INFO: sent PDF to ${input_pdf} successfully" 1>&2
  else  echo "ERROR: send PDF to ${input_pdf} failed" 1>&2; exit 1
fi

: '
if [[ -n $1 ]];
  then  echo "INFO: Job ID: $1" 1>&2
        jobid="$1"
  else 	echo "WARN: Job ID not defined" 1>&2
        jobid="not defined"
fi
 '

if [[ -n $2 ]];
  then  echo "INFO: User ID: $2" 1>&2
        userid="$2"
  else 	echo "WARN: User ID not defined" 1>&2
        userid="not defined"
fi

if [[ -n $3 ]];
  then  echo "INFO: Documnet ID: $3" 1>&2
        docid="$3"
  else 	echo "WARN: Document ID not defined" 1>&2
        docid="not defined"
fi

if [[ -n $4 ]];
  then  echo "INFO: Copies number: $4" 1>&2
        copiesNum="$4"
  else 	echo "WARN: Copies number not defined" 1>&2
        copiesNum="not defined"
fi

# Get settings from print dialogue
if [[ -n $5 ]]; then

: '
    if [[ $5 == *"Collate"* ]]; then 
        vCollate="Y"
        echo "INFO (JOB): Collate: true" 1>&2
    fi
 '

    if [[ $5 == *"Trim="* ]]; then 
        vTRIM="${5#*Trim=}"
        vTRIM="${vTRIM:0:1}"
        echo "INFO(JOB): Trim: ${vTRIM}" 1>&2
    fi

    if [[ $5 == *"PRes=r"* ]]; then 
        vPRES="${5#*PRes=r}"
        vPRES="${vPRES:0:3}"
        echo "INFO(JOB): Resolution: ${vPRES}" 1>&2
    fi

    if [[ $5 == *"MType="* ]]; then 
        vMTYPE="${5#*MType=}"
        vMTYPE="${vMTYPE:0:2}"
        echo "INFO(JOB): Media Type: ${vMTYPE}" 1>&2
    fi

    if [[ $5 == *"OSlot="* ]]; then 
        vOSLOT="${5#*OSlot=}"
        vOSLOT="${vOSLOT:0:2}"
        echo "INFO(JOB): Output Slot: ${vOSLOT}" 1>&2
    fi

    if [[ $5 == *"ISlot="* ]]; then 
        vISLOT="${5#*ISlot=}"
        vISLOT="${vISLOT:0:2}"
        echo "INFO(JOB): Input Slot: ${vISLOT}" 1>&2
    fi

fi

# Get settings from driver default settigns,
# if settings not defined in print dialogue
if [[ $(printenv | grep 'PPD=' | cut -c 5-) ]];
    then    ppdfile="$(printenv | grep 'PPD=' | cut -c 5-)"
            echo "INFO: Read settings from file: ${ppdfile}" 1>&2
            
            if ! [[ ${vTRIM} ]]; then 
                vTRIM=$(cat ${ppdfile} | grep '*DefaultTrim: ' | cut -c 15-)
                echo "INFO(PDD): Trim: ${vTRIM}" 1>&2
            fi
            
            if ! [[ ${vPRES} ]]; then 
                vPRES=$(cat ${ppdfile} | grep '*DefaultPRes: ' | cut -c 16-)
                echo "INFO(PDD): Resolution: ${vPRES}" 1>&2
            fi
            
            if ! [[ ${vMTYPE} ]]; then 
                vMTYPE=$(cat ${ppdfile} | grep '*DefaultMType: ' | cut -c 16-)
                echo "INFO(PDD): Media Type: ${vMTYPE}" 1>&2
            fi
            
            if ! [[ ${vOSLOT} ]]; then 
                vOSLOT=$(cat ${ppdfile} | grep '*DefaultOSlot: ' | cut -c 16-)
                echo "INFO(PDD): Output Slot: ${vOSLOT}" 1>&2
            fi
            
            if ! [[ ${vISLOT} ]]; then 
                vISLOT=$(cat ${ppdfile} | grep '*DefaultISlot: ' | cut -c 16-)
                echo "INFO(PDD): Input Slot: ${vISLOT}" 1>&2
            fi
    else    echo "WARN: PPD file not defined" 1>&2
fi

if [[ ${vTRIM} == "Y" ]];
then
    # Extract all pages into singlepage TIFF files
    if gs   -q \
            -dQUIET \
            -dNOPAUSE \
            -dBATCH \
            -dSAFER \
            -dPARANOIDSAFER \
            -dNOMEDIAATTRS \
            -dNOINTERPOLATE \
            -r${vPRES} \
            -sDEVICE=tiffg4 \
            -sOutputFile="page%03d.tiff" \
            ${input_pdf} 1>&2;
            then echo "INFO: extract pages from PDF to TIFF successfully" 1>&2
            else echo "ERROR: extract pages from PDF to TIFF failed" 1>&2; exit 1
    fi
    
    # Iter pages and trim white borders
    iter=0
    if [[ $(ls ${tmpdir} | grep 'page' | grep '.tiff') ]]; 
        then    pages=$(ls ${tmpdir} | grep 'page' | grep '.tiff')
                for item in ${pages}
                do
                    iter=$((iter+1))
                    pbtrim="$(printf "page%03d" ${iter}).tiff"
                    patrim="$(printf "page%03d" ${iter})_trimed.tiff"
                    if convert ${pbtrim} -trim -background white +repage ${patrim} 1>&2;
                        then echo "INFO: trim ${pbtrim} successfully" 1>&2
                        else echo "ERROR: trim ${pbtrim} failed" 1>&2; exit 1
                    fi
                done
                echo "INFO: trim pages successfully" 1>&2
        else    echo "ERROR: no pages to trim" 1>&2; exit 1
    fi
    
    # Merge single pages into multipage TIFF
    if convert $(ls ${tmpdir} | grep '_trimed.tiff'| tr "\n" " ") ${result_tif} 1>&2;
        then    "INFO: merge pages successfully" 1>&2
        else    "ERROR: merge pages failed" 1>&2; exit 1
    fi

else

    # Simply convert PDF to TIFF as is
    if gs   -q \
            -dQUIET \
            -dNOPAUSE \
            -dBATCH \
            -dSAFER \
            -dPARANOIDSAFER \
            -dNOMEDIAATTRS \
            -dNOINTERPOLATE \
            -r$vPRES \
            -sDEVICE=tiffg4 \
            -sOutputFile=${result_tif} \
            ${input_pdf} 1>&2;
            then echo "INFO: convert PDF to TIFF successfully" 1>&2
            else echo "ERROR: convert PDF to TIFF failed" 1>&2; exit 1
    fi
fi


# Create PJL header for printer JOB
echo -e "\e%-12345X@PJL COMMENT SET SERIES = Teriostar-01" > "${result_pjl}" #1st line create new file
echo "@PJL SET FILENAME = \"${docid}\"" >> "${result_pjl}"
timestamp=$(date +%Y%m%d%H%M%S)
echo "@PJL SET TIMESTAMP = \"${timestamp}\"" >> "${result_pjl}"
echo "@PJL SET USERNAME = \"${userid}\"" >> "${result_pjl}"
echo "@PJL SET HOSTNAME = \"$(hostname)\"" >> "${result_pjl}"
echo "@PJL SET DRIVERINFORMATION = \"JetCom Linux Printer Driver v1.0.0b\"" >> "${result_pjl}"
echo "@PJL SET ENCRYPTION = 0" >> "${result_pjl}"
echo "@PJL ENTER LANGUAGE = RTIFF" >> "${result_pjl}"

# Join PJL header and TIFF file
if cat "${result_pjl}" "${result_tif}" > "${result_prn}" #create new file
    then    echo -e "\e%-12345X@PJL" >> "${result_prn}" #add to the eof
            echo "INFO: join files ${result_pjl} and ${result_tif} successfully" 1>&2
    else    echo "ERROR: join files ${result_pjl} and ${result_tif} failed" 1>&2; exit 1
fi

# Get printer IP address
prefix="/etc/cups/ppd/"
suffix=".ppd"
printerName=${ppdfile#${prefix}}
printerName=${printerName%${suffix}}

printerURI=$(LC_ALL=C lpstat -s | grep "${printerName}: socket://")
prefix="device for ${printerName}: socket://"
printerURI=${printerURI#${prefix}}

printerAddr=${printerURI%:*}
printerPort=${printerURI#${printerAddr}}

if ! [[ ${printerPort} ]]; then printerPort="9100"; fi

# Send JOB to the printer
copiesNum=$(( copiesNum ))
copiesCtr=$(( 0 ))

while (( ${copiesCtr} < ${copiesNum} )); do
    copiesCtr=$(( copiesCtr+1 ))
    #if cat ${result_prn} | nc -w 1 ${printerAddr} ${printerPort} 1>&2
    if dd if=${result_prn} | socat TCP:${printerAddr}:${printerPort} -
    then echo "INFO: send JOB copy #${copiesCtr} successfully" 1>&2
    else echo "ERROR: send JOB copy #${copiesCtr} failed" 1>&2; exit 1
    fi
done

# Keep printer ready for next print
echo -e "\e%-12345X"
exit 0
